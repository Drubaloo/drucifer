/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, OrbitControls } from "@react-three/drei";
import { Canvas, useFrame } from '@react-three/fiber'


const shapes = require("../../assets/3dModels/backgroundShapes.gltf")

export function Model(props) {
  const { nodes, materials } = useGLTF(shapes);

  const group = useRef();
  const purplePyramid = useRef();
  const purplePyramidLines = useRef();
  const bluePyramid = useRef();
  const bluePyramidLines = useRef();
  const blueLog = useRef();
  const blueLogLines = useRef();
  const blueBlock = useRef();
  const blueBlockLines = useRef();

  useFrame((state, delta) => {
    // group.current.rotation.y += delta
    purplePyramid.current.rotation.y += delta
    purplePyramidLines.current.rotation.y += delta
    bluePyramid.current.rotation.y += delta
    bluePyramidLines.current.rotation.y += delta
    blueLog.current.rotation.x += delta
    blueLogLines.current.rotation.x += delta
    blueBlock.current.rotation.z += delta
    blueBlockLines.current.rotation.z += delta
  })

  return (
    <group {...props} dispose={null} scale={[2, 2, 2]} position={[0, 0, 0]}>
      <mesh
      ref={bluePyramid}
        castShadow
        receiveShadow
        geometry={nodes.pyramid001.geometry}
        material={materials["Material.002"]}
        position={[-1.33, 0.8, -0.09]}
        rotation={[-0.26, 0.43, 0.58]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePurple002.geometry}
        material={materials["Material.004"]}
        position={[1.5, 0.22, 0.51]}
        rotation={[0.14, -0.61, 0.24]}
        />
      <mesh
      ref={blueLog}
      castShadow
        receiveShadow
        geometry={nodes.blockBlue.geometry}
        material={materials["Material.002"]}
        position={[-0.7, -0.59, -0.72]}
        rotation={[-0.31, 0.09, 0.68]}
        />
      <mesh
        ref={purplePyramidLines}
        castShadow
        receiveShadow
        geometry={nodes.pyramidPurple.geometry}
        material={materials["Material.003"]}
        position={[-1.82, 0.7, -0.49]}
        rotation={[-0.27, 0.44, 0.58]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePurple.geometry}
        material={materials["Material.003"]}
        position={[0.49, 0.5, -0.28]}
        rotation={[2.28, -0.63, 2.04]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePiunk.geometry}
        material={materials["Material.004"]}
        position={[0.66, 0.85, -0.12]}
        rotation={[2.28, -0.63, 2.04]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pyramid001002.geometry}
        material={materials["Material.004"]}
        position={[0.53, -0.68, 0.55]}
        rotation={[-0.05, 0.15, 0.5]}
        />
      <mesh
        ref={blueBlock}
        castShadow
        receiveShadow
        geometry={nodes.cubePiunk002.geometry}
        material={materials["Material.002"]}
        position={[-1.54, -0.31, 0.34]}
        rotation={[2.28, -0.63, 2.04]}
        />
      <mesh
      ref={blueLogLines}
        castShadow
        receiveShadow
        geometry={nodes.blockBlue001.geometry}
        material={materials.Material}
        position={[-0.7, -0.59, -0.72]}
        rotation={[-0.31, 0.09, 0.68]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePiunk001.geometry}
        material={materials.Material}
        position={[0.66, 0.85, -0.12]}
        rotation={[2.28, -0.63, 2.04]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePurple001.geometry}
        material={materials.Material}
        position={[0.49, 0.5, -0.28]}
        rotation={[2.28, -0.63, 2.04]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cubePurple002001.geometry}
        material={materials.Material}
        position={[1.5, 0.22, 0.51]}
        rotation={[0.14, -0.61, 0.24]}
        />
      <mesh
        ref={bluePyramidLines}
        castShadow
        receiveShadow
        geometry={nodes.pyramid001001.geometry}
        material={materials.Material}
        position={[-1.33, 0.8, -0.09]}
        rotation={[-0.26, 0.43, 0.58]}
        />
      <mesh
        ref={purplePyramid}
        castShadow
        receiveShadow
        geometry={nodes.pyramidPurple001.geometry}
        material={materials.Material}
        position={[-1.82, 0.7, -0.49]}
        rotation={[-0.27, 0.44, 0.58]}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCurve.geometry}
        material={materials["Material.004"]}
        position={[-0.97, 0.48, 0]}
        rotation={[0, 0, 0.75]}
        scale={0.12}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCurve001.geometry}
        material={materials["Material.003"]}
        position={[-1.65, -0.54, 0]}
        rotation={[0, 0, -0.3]}
        scale={0.12}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCurve002.geometry}
        material={materials["Material.002"]}
        position={[1.21, -0.54, 0]}
        rotation={[0, 0, 0.75]}
        scale={0.33}
        />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pyramid001003.geometry}
        material={materials.Material}
        position={[0.53, -0.68, 0.55]}
        rotation={[-0.05, 0.15, 0.5]}
        />
      <mesh
        ref={blueBlockLines}
        castShadow
        receiveShadow
        geometry={nodes.cubePiunk003.geometry}
        material={materials.Material}
        position={[-1.54, -0.31, 0.34]}
        rotation={[2.28, -0.63, 2.04]}
        />
    </group>
  );
}

useGLTF.preload(shapes);

export default function BackgroundShapes() {

  return <div style={{ zIndex: "-1", position: "fixed", height: "100dvh", width: "100dvw", border: "2px solid red", pointerEvents: "none" }}>
    <Canvas orthographic camera={{ zoom: 125, position: [0, 0, 10] }} >
      <OrbitControls enablePan={false} enableZoom={false} enableRotate={true} default={true} />
      <ambientLight intensity={0.5} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
      <pointLight position={[-10, -10, -10]} />
      {/* <pointLight position={[5, 5, 5]} /> */}
      <Model />
    </Canvas>
  </div >
}
