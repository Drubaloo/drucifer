{"ast":null,"code":"var THREE = require('three');\n// three REVISION = '117';\n/*  \n* CopyShader \n* EffectComposer\n* Pass \n* RenderPass \n* ShaderPass \n* OutlinePass \n* MaskPass\n* ClearMaskPass\n*/\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\nTHREE.CopyShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"opacity\": {\n      value: 1.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.EffectComposer = function (renderer, renderTarget) {\n  this.renderer = renderer;\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getSize(new THREE.Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = [];\n\n  // dependencies\n\n  if (THREE.CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.CopyShader');\n  }\n  if (THREE.ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass');\n  }\n  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n  this.clock = new THREE.Clock();\n};\nObject.assign(THREE.EffectComposer.prototype, {\n  swapBuffers: function () {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function (pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function (pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  isLastEnabledPass: function (passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  },\n  render: function (deltaTime) {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n      i,\n      il = this.passes.length;\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil;\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n        this.swapBuffers();\n      }\n      if (THREE.MaskPass !== undefined) {\n        if (pass instanceof THREE.MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof THREE.ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function (renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new THREE.Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function (width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function (pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\nTHREE.Pass = function () {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  this.renderToScreen = false;\n};\nObject.assign(THREE.Pass.prototype, {\n  setSize: function /* width, height */ () {},\n  render: function /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  () {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\nTHREE.Pass.FullScreenQuad = function () {\n  var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new THREE.PlaneBufferGeometry(2, 2);\n  var FullScreenQuad = function (material) {\n    this._mesh = new THREE.Mesh(geometry, material);\n  };\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function () {\n      return this._mesh.material;\n    },\n    set: function (value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function () {\n      this._mesh.geometry.dispose();\n    },\n    render: function (renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  THREE.Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.overrideMaterial = overrideMaterial;\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\nTHREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.RenderPass,\n  render: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor(new THREE.Color()).getHex();\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n\n    // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha);\n    }\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n    renderer.autoClear = oldAutoClear;\n  }\n});\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ShaderPass = function (shader, textureID) {\n  THREE.Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n  if (shader instanceof THREE.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n  this.fsQuad = new THREE.Pass.FullScreenQuad(this.material);\n};\nTHREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.ShaderPass,\n  render: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n    this.fsQuad.material = this.material;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\n/**\n * @author spidersharma / http://eduperiment.com/\n */\n\nTHREE.OutlinePass = function (resolution, scene, camera, selectedObjects) {\n  this.renderScene = scene;\n  this.renderCamera = camera;\n  this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n  this.visibleEdgeColor = new THREE.Color(1, 1, 1);\n  this.hiddenEdgeColor = new THREE.Color(0.1, 0.04, 0.02);\n  this.edgeGlow = 0.0;\n  this.usePatternTexture = false;\n  this.edgeThickness = 1.0;\n  this.edgeStrength = 3.0;\n  this.downSampleRatio = 2;\n  this.pulsePeriod = 0;\n  THREE.Pass.call(this);\n  this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n  var pars = {\n    minFilter: THREE.LinearFilter,\n    magFilter: THREE.LinearFilter,\n    format: THREE.RGBAFormat\n  };\n  var resx = Math.round(this.resolution.x / this.downSampleRatio);\n  var resy = Math.round(this.resolution.y / this.downSampleRatio);\n  this.maskBufferMaterial = new THREE.MeshBasicMaterial({\n    color: 0xffffff\n  });\n  this.maskBufferMaterial.side = THREE.DoubleSide;\n  this.renderTargetMaskBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n  this.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\n  this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n  this.depthMaterial = new THREE.MeshDepthMaterial();\n  this.depthMaterial.side = THREE.DoubleSide;\n  this.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n  this.depthMaterial.blending = THREE.NoBlending;\n  this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n  this.prepareMaskMaterial.side = THREE.DoubleSide;\n  this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n  this.renderTargetDepthBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n  this.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\n  this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n  this.renderTargetMaskDownSampleBuffer = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\n  this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n  this.renderTargetBlurBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\n  this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n  this.renderTargetBlurBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n  this.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\n  this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n  this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n  this.renderTargetEdgeBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\n  this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n  this.renderTargetEdgeBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n  this.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\n  this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n  var MAX_EDGE_THICKNESS = 4;\n  var MAX_EDGE_GLOW = 4;\n  this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n  this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n  this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = 1;\n  this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n  this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(Math.round(resx / 2), Math.round(resy / 2));\n  this.separableBlurMaterial2.uniforms[\"kernelRadius\"].value = MAX_EDGE_GLOW;\n\n  // Overlay material\n  this.overlayMaterial = this.getOverlayMaterial();\n\n  // copy material\n  if (THREE.CopyShader === undefined) console.error(\"THREE.OutlinePass relies on THREE.CopyShader\");\n  var copyShader = THREE.CopyShader;\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = 1.0;\n  this.materialCopy = new THREE.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.NoBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  this.enabled = true;\n  this.needsSwap = false;\n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n  this.fsQuad = new THREE.Pass.FullScreenQuad(null);\n  this.tempPulseColor1 = new THREE.Color();\n  this.tempPulseColor2 = new THREE.Color();\n  this.textureMatrix = new THREE.Matrix4();\n  function replaceDepthToViewZ(string, camera) {\n    var type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n    return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n  }\n};\nTHREE.OutlinePass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.OutlinePass,\n  dispose: function () {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  },\n  setSize: function (width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    var resx = Math.round(width / this.downSampleRatio);\n    var resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(resx, resy);\n  },\n  changeVisibilityOfSelectedObjects: function (bVisible) {\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible) {\n          object.visible = object.userData.oldVisible;\n          delete object.userData.oldVisible;\n        } else {\n          object.userData.oldVisible = object.visible;\n          object.visible = bVisible;\n        }\n      }\n    }\n    for (var i = 0; i < this.selectedObjects.length; i++) {\n      var selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  },\n  changeVisibilityOfNonSelectedObjects: function (bVisible) {\n    var selectedMeshes = [];\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n    for (var i = 0; i < this.selectedObjects.length; i++) {\n      var selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isLine || object.isSprite) {\n        var bFound = false;\n        for (var i = 0; i < selectedMeshes.length; i++) {\n          var selectedObjectId = selectedMeshes[i].id;\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n        if (!bFound) {\n          var visibility = object.visible;\n          if (!bVisible || object.bVisible) object.visible = bVisible;\n          object.bVisible = visibility;\n        }\n      }\n    }\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  },\n  updateTextureMatrix: function () {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  },\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      this.oldClearColor.copy(renderer.getClearColor(new THREE.Color()));\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1);\n\n      // Make selected objects invisible\n      this.changeVisibilityOfSelectedObjects(false);\n      var currentBackground = this.renderScene.background;\n      this.renderScene.background = null;\n\n      // 1. Draw Non Selected objects in the depth buffer\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n\n      // Make selected objects visible\n      this.changeVisibilityOfSelectedObjects(true);\n\n      // Update Texture Matrix for Depth compare\n      this.updateTextureMatrix();\n\n      // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms[\"cameraNearFar\"].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms[\"depthTexture\"].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms[\"textureMatrix\"].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n      this.renderScene.background = currentBackground;\n\n      // 2. Downsample to Half resolution\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n      if (this.pulsePeriod > 0) {\n        var scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      }\n\n      // 3. Apply Edge Detection Pass\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms[\"texSize\"].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms[\"visibleEdgeColor\"].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms[\"hiddenEdgeColor\"].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // 4. Apply Blur on Half res\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // Apply Blur on quarter res\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // Blend it additively over the input texture\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms[\"edgeTexture1\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms[\"edgeTexture2\"].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms[\"patternTexture\"].value = this.patternTexture;\n      this.overlayMaterial.uniforms[\"edgeStrength\"].value = this.edgeStrength;\n      this.overlayMaterial.uniforms[\"edgeGlow\"].value = this.edgeGlow;\n      this.overlayMaterial.uniforms[\"usePatternTexture\"].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  },\n  getPrepareMaskMaterial: function () {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        \"depthTexture\": {\n          value: null\n        },\n        \"cameraNearFar\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"textureMatrix\": {\n          value: null\n        }\n      },\n      vertexShader: ['#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', 'varying vec4 projTexCoord;', 'varying vec4 vPosition;', 'uniform mat4 textureMatrix;', 'void main() {', '\t#include <skinbase_vertex>', '\t#include <begin_vertex>', '\t#include <morphtarget_vertex>', '\t#include <skinning_vertex>', '\t#include <project_vertex>', '\tvPosition = mvPosition;', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tprojTexCoord = textureMatrix * worldPosition;', '}'].join('\\n'),\n      fragmentShader: ['#include <packing>', 'varying vec4 vPosition;', 'varying vec4 projTexCoord;', 'uniform sampler2D depthTexture;', 'uniform vec2 cameraNearFar;', 'void main() {', '\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));', '\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );', '\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;', '\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);', '}'].join('\\n')\n    });\n  },\n  getEdgeDetectionMaterial: function () {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        \"maskTexture\": {\n          value: null\n        },\n        \"texSize\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"visibleEdgeColor\": {\n          value: new THREE.Vector3(1.0, 1.0, 1.0)\n        },\n        \"hiddenEdgeColor\": {\n          value: new THREE.Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n      fragmentShader: \"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\n\t\t\t\t}\"\n    });\n  },\n  getSeperableBlurMaterial: function (maxRadius) {\n    return new THREE.ShaderMaterial({\n      defines: {\n        \"MAX_RADIUS\": maxRadius\n      },\n      uniforms: {\n        \"colorTexture\": {\n          value: null\n        },\n        \"texSize\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"direction\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"kernelRadius\": {\n          value: 1.0\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n      fragmentShader: \"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\\n\t\t\t\tuniform sampler2D colorTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\tuniform float kernelRadius;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\n\t\t\t\t\tvec2 uvOffset = delta;\\\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\n\t\t\t\t\t\tuvOffset += delta;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\n\t\t\t\t}\"\n    });\n  },\n  getOverlayMaterial: function () {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        \"maskTexture\": {\n          value: null\n        },\n        \"edgeTexture1\": {\n          value: null\n        },\n        \"edgeTexture2\": {\n          value: null\n        },\n        \"patternTexture\": {\n          value: null\n        },\n        \"edgeStrength\": {\n          value: 1.0\n        },\n        \"edgeGlow\": {\n          value: 1.0\n        },\n        \"usePatternTexture\": {\n          value: 0.0\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n      fragmentShader: \"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform sampler2D edgeTexture1;\\\n\t\t\t\tuniform sampler2D edgeTexture2;\\\n\t\t\t\tuniform sampler2D patternTexture;\\\n\t\t\t\tuniform float edgeStrength;\\\n\t\t\t\tuniform float edgeGlow;\\\n\t\t\t\tuniform bool usePatternTexture;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\n\t\t\t\t\tif(usePatternTexture)\\\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\n\t\t\t\t\tgl_FragColor = finalColor;\\\n\t\t\t\t}\",\n      blending: THREE.AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n});\nTHREE.OutlinePass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.OutlinePass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\nTHREE.MaskPass = function (scene, camera) {\n  THREE.Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\nTHREE.MaskPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.MaskPass,\n  render: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    var context = renderer.getContext();\n    var state = renderer.state;\n\n    // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false);\n\n    // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true);\n\n    // set up stencil\n\n    var writeValue, clearValue;\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true);\n\n    // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false);\n\n    // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n});\nTHREE.ClearMaskPass = function () {\n  THREE.Pass.call(this);\n  this.needsSwap = false;\n};\nTHREE.ClearMaskPass.prototype = Object.create(THREE.Pass.prototype);\nObject.assign(THREE.ClearMaskPass.prototype, {\n  render: function (renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\nexports.CopyShader = THREE.CopyShader;\nexports.EffectComposer = THREE.EffectComposer;\nexports.RenderPass = THREE.RenderPass;\nexports.OutlinePass = THREE.OutlinePass;\nexports.ShaderPass = THREE.ShaderPass;\nexports.MaskPass = THREE.MaskPass;\nexports.ClearMaskPass = THREE.ClearMaskPass;","map":{"version":3,"names":["THREE","require","CopyShader","uniforms","value","vertexShader","join","fragmentShader","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","ShaderPass","copyPass","clock","Clock","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","RenderPass","scene","overrideMaterial","clearColor","clearAlpha","call","clearDepth","create","constructor","oldAutoClear","autoClear","oldClearColor","oldClearAlpha","oldOverrideMaterial","getClearColor","Color","getHex","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","shader","textureID","ShaderMaterial","UniformsUtils","defines","fsQuad","OutlinePass","resolution","selectedObjects","renderScene","renderCamera","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","x","y","pars","resx","Math","round","resy","maskBufferMaterial","MeshBasicMaterial","color","side","DoubleSide","renderTargetMaskBuffer","generateMipmaps","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","prepareMaskMaterial","getPrepareMaskMaterial","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","copyShader","copyUniforms","materialCopy","depthTest","depthWrite","transparent","tempPulseColor1","tempPulseColor2","textureMatrix","Matrix4","string","type","isPerspectiveCamera","replace","changeVisibilityOfSelectedObjects","bVisible","gatherSelectedMeshesCallBack","object","isMesh","visible","userData","oldVisible","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","VisibilityChangeCallBack","isLine","isSprite","bFound","selectedObjectId","id","visibility","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","copy","setTest","currentBackground","background","near","far","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","Vector3","maxRadius","AdditiveBlending","inverse","setMask","depth","setLocked","writeValue","clearValue","setOp","REPLACE","ALWAYS","setClear","KEEP","exports"],"sources":["C:/Users/Dru/Documents/Personal Projects/threeJSBlenderBaby/node_modules/three-outlinepass/OutlinePass.js"],"sourcesContent":["var THREE = require('three');\n// three REVISION = '117';\n/*  \n* CopyShader \n* EffectComposer\n* Pass \n* RenderPass \n* ShaderPass \n* OutlinePass \n* MaskPass\n* ClearMaskPass\n*/\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\nTHREE.CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"vUv = uv;\",\n\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.EffectComposer = function (renderer, renderTarget) {\n\n\tthis.renderer = renderer;\n\n\tif (renderTarget === undefined) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize(new THREE.Vector2());\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif (THREE.CopyShader === undefined) {\n\n\t\tconsole.error('THREE.EffectComposer relies on THREE.CopyShader');\n\n\t}\n\n\tif (THREE.ShaderPass === undefined) {\n\n\t\tconsole.error('THREE.EffectComposer relies on THREE.ShaderPass');\n\n\t}\n\n\tthis.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n\n\tthis.clock = new THREE.Clock();\n\n};\n\nObject.assign(THREE.EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function (pass) {\n\n\t\tthis.passes.push(pass);\n\t\tpass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n\n\t},\n\n\tinsertPass: function (pass, index) {\n\n\t\tthis.passes.splice(index, 0, pass);\n\t\tpass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n\n\t},\n\n\tisLastEnabledPass: function (passIndex) {\n\n\t\tfor (var i = passIndex + 1; i < this.passes.length; i++) {\n\n\t\t\tif (this.passes[i].enabled) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function (deltaTime) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif (deltaTime === undefined) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor (i = 0; i < il; i++) {\n\n\t\t\tpass = this.passes[i];\n\n\t\t\tif (pass.enabled === false) continue;\n\n\t\t\tpass.renderToScreen = (this.renderToScreen && this.isLastEnabledPass(i));\n\t\t\tpass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n\t\t\tif (pass.needsSwap) {\n\n\t\t\t\tif (maskActive) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n\n\t\t\t\t\tthis.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc(context.EQUAL, 1, 0xffffffff);\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif (THREE.MaskPass !== undefined) {\n\n\t\t\t\tif (pass instanceof THREE.MaskPass) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if (pass instanceof THREE.ClearMaskPass) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget(currentRenderTarget);\n\n\t},\n\n\treset: function (renderTarget) {\n\n\t\tif (renderTarget === undefined) {\n\n\t\t\tvar size = this.renderer.getSize(new THREE.Vector2());\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function (width, height) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n\t\tthis.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n\t\tfor (var i = 0; i < this.passes.length; i++) {\n\n\t\t\tthis.passes[i].setSize(effectiveWidth, effectiveHeight);\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function (pixelRatio) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize(this._width, this._height);\n\n\t}\n\n});\n\n\nTHREE.Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign(THREE.Pass.prototype, {\n\n\tsetSize: function ( /* width, height */) { },\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */) {\n\n\t\tconsole.error('THREE.Pass: .render() must be implemented in derived pass.');\n\n\t}\n\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\nTHREE.Pass.FullScreenQuad = ( function () {\n\n\tvar camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new THREE.PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new THREE.Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n\n\tTHREE.Pass.call(this);\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = (clearAlpha !== undefined) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nTHREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\tconstructor: THREE.RenderPass,\n\n\trender: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif (this.overrideMaterial !== undefined) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif (this.clearColor) {\n\n\t\t\toldClearColor = renderer.getClearColor(new THREE.Color()).getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor(this.clearColor, this.clearAlpha);\n\n\t\t}\n\n\t\tif (this.clearDepth) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\trenderer.render(this.scene, this.camera);\n\n\t\tif (this.clearColor) {\n\n\t\t\trenderer.setClearColor(oldClearColor, oldClearAlpha);\n\n\t\t}\n\n\t\tif (this.overrideMaterial !== undefined) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n});\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ShaderPass = function (shader, textureID) {\n\n\tTHREE.Pass.call(this);\n\n\tthis.textureID = (textureID !== undefined) ? textureID : \"tDiffuse\";\n\n\tif (shader instanceof THREE.ShaderMaterial) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if (shader) {\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n\t\tthis.material = new THREE.ShaderMaterial({\n\n\t\t\tdefines: Object.assign({}, shader.defines),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t});\n\n\t}\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad(this.material);\n\n};\n\nTHREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\tconstructor: THREE.ShaderPass,\n\n\trender: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n\n\t\tif (this.uniforms[this.textureID]) {\n\n\t\t\tthis.uniforms[this.textureID].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif (this.renderToScreen) {\n\n\t\t\trenderer.setRenderTarget(null);\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget(writeBuffer);\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t}\n\n\t}\n\n});\n\n/**\n * @author spidersharma / http://eduperiment.com/\n */\n\nTHREE.OutlinePass = function (resolution, scene, camera, selectedObjects) {\n\n\tthis.renderScene = scene;\n\tthis.renderCamera = camera;\n\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\tthis.visibleEdgeColor = new THREE.Color(1, 1, 1);\n\tthis.hiddenEdgeColor = new THREE.Color(0.1, 0.04, 0.02);\n\tthis.edgeGlow = 0.0;\n\tthis.usePatternTexture = false;\n\tthis.edgeThickness = 1.0;\n\tthis.edgeStrength = 3.0;\n\tthis.downSampleRatio = 2;\n\tthis.pulsePeriod = 0;\n\n\tTHREE.Pass.call(this);\n\n\tthis.resolution = (resolution !== undefined) ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n\n\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n\n\tvar resx = Math.round(this.resolution.x / this.downSampleRatio);\n\tvar resy = Math.round(this.resolution.y / this.downSampleRatio);\n\n\tthis.maskBufferMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\tthis.maskBufferMaterial.side = THREE.DoubleSide;\n\tthis.renderTargetMaskBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n\tthis.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\n\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\tthis.depthMaterial = new THREE.MeshDepthMaterial();\n\tthis.depthMaterial.side = THREE.DoubleSide;\n\tthis.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n\tthis.depthMaterial.blending = THREE.NoBlending;\n\n\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\tthis.prepareMaskMaterial.side = THREE.DoubleSide;\n\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n\n\tthis.renderTargetDepthBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n\tthis.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\n\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetMaskDownSampleBuffer = new THREE.WebGLRenderTarget(resx, resy, pars);\n\tthis.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\n\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetBlurBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);\n\tthis.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\n\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetBlurBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n\tthis.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\n\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\tthis.renderTargetEdgeBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);\n\tthis.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\n\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetEdgeBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n\tthis.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\n\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\tvar MAX_EDGE_THICKNESS = 4;\n\tvar MAX_EDGE_GLOW = 4;\n\n\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n\tthis.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n\tthis.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = 1;\n\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n\tthis.separableBlurMaterial2.uniforms[\"texSize\"].value.set(Math.round(resx / 2), Math.round(resy / 2));\n\tthis.separableBlurMaterial2.uniforms[\"kernelRadius\"].value = MAX_EDGE_GLOW;\n\n\t// Overlay material\n\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t// copy material\n\tif (THREE.CopyShader === undefined)\n\t\tconsole.error(\"THREE.OutlinePass relies on THREE.CopyShader\");\n\n\tvar copyShader = THREE.CopyShader;\n\n\tthis.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n\tthis.copyUniforms[\"opacity\"].value = 1.0;\n\n\tthis.materialCopy = new THREE.ShaderMaterial({\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: THREE.NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t});\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new THREE.Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad(null);\n\n\tthis.tempPulseColor1 = new THREE.Color();\n\tthis.tempPulseColor2 = new THREE.Color();\n\tthis.textureMatrix = new THREE.Matrix4();\n\n\tfunction replaceDepthToViewZ(string, camera) {\n\n\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\treturn string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n\n\t}\n\n};\n\nTHREE.OutlinePass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\tconstructor: THREE.OutlinePass,\n\n\tdispose: function () {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t},\n\n\tsetSize: function (width, height) {\n\n\t\tthis.renderTargetMaskBuffer.setSize(width, height);\n\n\t\tvar resx = Math.round(width / this.downSampleRatio);\n\t\tvar resy = Math.round(height / this.downSampleRatio);\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n\t\tthis.renderTargetBlurBuffer1.setSize(resx, resy);\n\t\tthis.renderTargetEdgeBuffer1.setSize(resx, resy);\n\t\tthis.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n\n\t\tresx = Math.round(resx / 2);\n\t\tresy = Math.round(resy / 2);\n\n\t\tthis.renderTargetBlurBuffer2.setSize(resx, resy);\n\t\tthis.renderTargetEdgeBuffer2.setSize(resx, resy);\n\n\t\tthis.separableBlurMaterial2.uniforms[\"texSize\"].value.set(resx, resy);\n\n\t},\n\n\tchangeVisibilityOfSelectedObjects: function (bVisible) {\n\n\t\tfunction gatherSelectedMeshesCallBack(object) {\n\n\t\t\tif (object.isMesh) {\n\n\t\t\t\tif (bVisible) {\n\n\t\t\t\t\tobject.visible = object.userData.oldVisible;\n\t\t\t\t\tdelete object.userData.oldVisible;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.userData.oldVisible = object.visible;\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor (var i = 0; i < this.selectedObjects.length; i++) {\n\n\t\t\tvar selectedObject = this.selectedObjects[i];\n\t\t\tselectedObject.traverse(gatherSelectedMeshesCallBack);\n\n\t\t}\n\n\t},\n\n\tchangeVisibilityOfNonSelectedObjects: function (bVisible) {\n\n\t\tvar selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack(object) {\n\n\t\t\tif (object.isMesh) selectedMeshes.push(object);\n\n\t\t}\n\n\t\tfor (var i = 0; i < this.selectedObjects.length; i++) {\n\n\t\t\tvar selectedObject = this.selectedObjects[i];\n\t\t\tselectedObject.traverse(gatherSelectedMeshesCallBack);\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack(object) {\n\n\t\t\tif (object.isMesh || object.isLine || object.isSprite) {\n\n\t\t\t\tvar bFound = false;\n\n\t\t\t\tfor (var i = 0; i < selectedMeshes.length; i++) {\n\n\t\t\t\t\tvar selectedObjectId = selectedMeshes[i].id;\n\n\t\t\t\t\tif (selectedObjectId === object.id) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (!bFound) {\n\n\t\t\t\t\tvar visibility = object.visible;\n\n\t\t\t\t\tif (!bVisible || object.bVisible) object.visible = bVisible;\n\n\t\t\t\t\tobject.bVisible = visibility;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse(VisibilityChangeCallBack);\n\n\t},\n\n\tupdateTextureMatrix: function () {\n\n\t\tthis.textureMatrix.set(0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0);\n\t\tthis.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n\t\tthis.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n\n\t},\n\n\trender: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\n\t\tif (this.selectedObjects.length > 0) {\n\n\t\t\tthis.oldClearColor.copy(renderer.getClearColor(new THREE.Color()));\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif (maskActive) renderer.state.buffers.stencil.setTest(false);\n\n\t\t\trenderer.setClearColor(0xffffff, 1);\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects(false);\n\n\t\t\tvar currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget(this.renderTargetDepthBuffer);\n\t\t\trenderer.clear();\n\t\t\trenderer.render(this.renderScene, this.renderCamera);\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects(true);\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects(false);\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[\"cameraNearFar\"].value.set(this.renderCamera.near, this.renderCamera.far);\n\t\t\tthis.prepareMaskMaterial.uniforms[\"depthTexture\"].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[\"textureMatrix\"].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget(this.renderTargetMaskBuffer);\n\t\t\trenderer.clear();\n\t\t\trenderer.render(this.renderScene, this.renderCamera);\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects(true);\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[\"tDiffuse\"].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\tthis.tempPulseColor1.copy(this.visibleEdgeColor);\n\t\t\tthis.tempPulseColor2.copy(this.hiddenEdgeColor);\n\n\t\t\tif (this.pulsePeriod > 0) {\n\n\t\t\t\tvar scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar(scalar);\n\t\t\t\tthis.tempPulseColor2.multiplyScalar(scalar);\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[\"texSize\"].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n\t\t\tthis.edgeDetectionMaterial.uniforms[\"visibleEdgeColor\"].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[\"hiddenEdgeColor\"].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget(this.renderTargetBlurBuffer1);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\t\t\tthis.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget(this.renderTargetBlurBuffer2);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\t\t\tthis.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[\"direction\"].value = THREE.OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[\"edgeTexture1\"].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[\"edgeTexture2\"].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[\"patternTexture\"].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[\"edgeStrength\"].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[\"edgeGlow\"].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[\"usePatternTexture\"].value = this.usePatternTexture;\n\n\n\t\t\tif (maskActive) renderer.state.buffers.stencil.setTest(true);\n\n\t\t\trenderer.setRenderTarget(readBuffer);\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\trenderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif (this.renderToScreen) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[\"tDiffuse\"].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget(null);\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t}\n\n\t},\n\n\tgetPrepareMaskMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tuniforms: {\n\t\t\t\t\"depthTexture\": { value: null },\n\t\t\t\t\"cameraNearFar\": { value: new THREE.Vector2(0.5, 0.5) },\n\t\t\t\t\"textureMatrix\": { value: null }\n\t\t\t},\n\n\t\t\tvertexShader: [\n\t\t\t\t'#include <morphtarget_pars_vertex>',\n\t\t\t\t'#include <skinning_pars_vertex>',\n\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'uniform mat4 textureMatrix;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\t#include <skinbase_vertex>',\n\t\t\t\t'\t#include <begin_vertex>',\n\t\t\t\t'\t#include <morphtarget_vertex>',\n\t\t\t\t'\t#include <skinning_vertex>',\n\t\t\t\t'\t#include <project_vertex>',\n\n\t\t\t\t'\tvPosition = mvPosition;',\n\t\t\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t\t\t'\tprojTexCoord = textureMatrix * worldPosition;',\n\n\t\t\t\t'}'\n\t\t\t].join('\\n'),\n\n\t\t\tfragmentShader: [\n\t\t\t\t'#include <packing>',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'uniform sampler2D depthTexture;',\n\t\t\t\t'uniform vec2 cameraNearFar;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));',\n\t\t\t\t'\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );',\n\t\t\t\t'\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;',\n\t\t\t\t'\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);',\n\n\t\t\t\t'}'\n\t\t\t].join('\\n')\n\n\t\t});\n\n\t},\n\n\tgetEdgeDetectionMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tuniforms: {\n\t\t\t\t\"maskTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2(0.5, 0.5) },\n\t\t\t\t\"visibleEdgeColor\": { value: new THREE.Vector3(1.0, 1.0, 1.0) },\n\t\t\t\t\"hiddenEdgeColor\": { value: new THREE.Vector3(1.0, 1.0, 1.0) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\n\t\t\t\t}\"\n\t\t});\n\n\t},\n\n\tgetSeperableBlurMaterial: function (maxRadius) {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tdefines: {\n\t\t\t\t\"MAX_RADIUS\": maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2(0.5, 0.5) },\n\t\t\t\t\"direction\": { value: new THREE.Vector2(0.5, 0.5) },\n\t\t\t\t\"kernelRadius\": { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\\n\t\t\t\tuniform sampler2D colorTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\tuniform float kernelRadius;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\n\t\t\t\t\tvec2 uvOffset = delta;\\\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\n\t\t\t\t\t\tuvOffset += delta;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\n\t\t\t\t}\"\n\t\t});\n\n\t},\n\n\tgetOverlayMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tuniforms: {\n\t\t\t\t\"maskTexture\": { value: null },\n\t\t\t\t\"edgeTexture1\": { value: null },\n\t\t\t\t\"edgeTexture2\": { value: null },\n\t\t\t\t\"patternTexture\": { value: null },\n\t\t\t\t\"edgeStrength\": { value: 1.0 },\n\t\t\t\t\"edgeGlow\": { value: 1.0 },\n\t\t\t\t\"usePatternTexture\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform sampler2D edgeTexture1;\\\n\t\t\t\tuniform sampler2D edgeTexture2;\\\n\t\t\t\tuniform sampler2D patternTexture;\\\n\t\t\t\tuniform float edgeStrength;\\\n\t\t\t\tuniform float edgeGlow;\\\n\t\t\t\tuniform bool usePatternTexture;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\n\t\t\t\t\tif(usePatternTexture)\\\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\n\t\t\t\t\tgl_FragColor = finalColor;\\\n\t\t\t\t}\",\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t});\n\n\t}\n\n});\n\nTHREE.OutlinePass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.OutlinePass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\nTHREE.MaskPass = function (scene, camera) {\n\n\tTHREE.Pass.call(this);\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nTHREE.MaskPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\tconstructor: THREE.MaskPass,\n\n\trender: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask(false);\n\t\tstate.buffers.depth.setMask(false);\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked(true);\n\t\tstate.buffers.depth.setLocked(true);\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif (this.inverse) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest(true);\n\t\tstate.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n\t\tstate.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n\t\tstate.buffers.stencil.setClear(clearValue);\n\t\tstate.buffers.stencil.setLocked(true);\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget(readBuffer);\n\t\tif (this.clear) renderer.clear();\n\t\trenderer.render(this.scene, this.camera);\n\n\t\trenderer.setRenderTarget(writeBuffer);\n\t\tif (this.clear) renderer.clear();\n\t\trenderer.render(this.scene, this.camera);\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked(false);\n\t\tstate.buffers.depth.setLocked(false);\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked(false);\n\t\tstate.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\t\tstate.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n\t\tstate.buffers.stencil.setLocked(true);\n\n\t}\n\n});\n\n\nTHREE.ClearMaskPass = function () {\n\n\tTHREE.Pass.call(this);\n\n\tthis.needsSwap = false;\n\n};\n\nTHREE.ClearMaskPass.prototype = Object.create(THREE.Pass.prototype);\n\nObject.assign(THREE.ClearMaskPass.prototype, {\n\n\trender: function (renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n\n\t\trenderer.state.buffers.stencil.setLocked(false);\n\t\trenderer.state.buffers.stencil.setTest(false);\n\n\t}\n\n});\n\nexports.CopyShader = THREE.CopyShader;\nexports.EffectComposer = THREE.EffectComposer;\nexports.RenderPass = THREE.RenderPass;\nexports.OutlinePass = THREE.OutlinePass;\nexports.ShaderPass = THREE.ShaderPass;\nexports.MaskPass = THREE.MaskPass;\nexports.ClearMaskPass = THREE.ClearMaskPass;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}